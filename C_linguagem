/*
Inserir e configurar header > no vscode Ctrl + Alt + H
git config --global user.email letda-si@student.42sp.org.br
ou pelo vscode 42 header > settings mesmo

TABS AO INVES DE ESPAÇOS
ativar configuração para>> Indent using Tabs
*/

/* ARQUIVO PARA TESTE ### MANTÉM A FUNÇÃO MAIN ### gcc file.c ### ./a.out ### CONFERE OUTPUT */
#include <unistd.h>

void    ft_putchar(char c)
{
    write (1, &c, 1);
}

int main(void)
{
    ft_putchar ('c');
    return (0);
}

/**********output***********/
/*********>c		
****************************/

/* ARQUIVO PARA ENVIO */
#include <unistd.h>

void    ft_putchar(char c)
{
    write (1, &c, 1);
}

/*
int main(void)
{
    ft_putchar ('c');
    return (0);
}
*/
/* #### FIM #### ARQUIVO PARA ENVIO */

/*		revisão		*/
norminette -R file.c
/*		Moulinette compila assim		*/
cc -w -w -w file 
/*		revisão		*/
sempre que for solicitado um PROGRAMA, esepra-se a função main() dentro do arquivo.

bibliotecas standard <string.h> https://petbcc.ufscar.br/string/

<stdio.h> size_t: tipo inteiro positivo destinado a guardar o tamanho que um objeto ocupa na memória.

//Exemplo1: Programa usando loop for em C
#include <stdio.h>
#include <conio.h>
int main(void)
{
  int contador; //variável de controle do loop
  
  for(contador = 1; contador <= 10; contador++)
  {
    printf("%d ", contador);
  }
  
  getch();
  return(0);
}
//>1 2 3 4 5 6 7 8 9 10

//TESTES COM LOOP 
// usando for (não é aceito nesse exercício)
#include <unistd.h>

void	ft_print_alphabet(void)
{
	char	x;

	for (x = 'a'; x <= 'z'; x++)
	{
		write(1, &x, 1);
	}
}

int	main(void)
{
	ft_print_alphabet();
	return (0);
}

//usando while ***** FORMATO ESPERADO, SE NAO PEDIU QUEBRA DE LINHA NAO EH PRA BOTAR ****
//************************C00EX01*****VERSAO FINAL*********************/
#include <unistd.h>

void	ft_print_alphabet(void)
{
	char	x;

	x = 'a';
	while (x <= 'z')
	{
		write(1, &x, 1);
		x++;
	}
}

int main(void)
{
    ft_print_alphabet();
    return 0;
}

//RECURSIVAMENTE ---- EQUIVALENTE COM WHILE
#include <unistd.h>

void print_alphabet_while_recursive(char x)
{
    if (x > 'z')
        return;  // base case: stop recursion
    
    write(1, &x, 1);
    write(1, " ", 1);

    print_alphabet_while_recursive(x + 1);  // recursive call simulates loop iteration
}

void ft_print_alphabet(void)
{
    print_alphabet_while_recursive('a');
    write(1, "\n", 1);
}

int main(void)
{
    ft_print_alphabet();
    return 0;
}

//RECURSIVAMENTE ---- SEM LOOP
#include <unistd.h>

void ft_print_alphabet_recursive(char x) // ESSA ESTRUTURA NÃO ATENDE AO EXERCÍCIO
{
    if (x > 'z') //condiçao de controle > STOP if bigger than 'z'
    {
        write(1, "\n", 1);
        return;
    }
    write(1, &x, 1);
    write(1, " ", 1);
    ft_print_alphabet_recursive(x + 1); //função faz papel de while
}

void ft_print_alphabet(void)
{
    ft_print_alphabet_recursive('a');
}

int main(void)
{
    ft_print_alphabet();
    return 0;
}

// ALFABETO REVERSO __ usando IF 

#include <unistd.h>

void	ft_while(char x) // não atende ao protótipo do enunciado
{
	if (x < 'a')
	{
		write(1, "\n", 1);
		return ;
	}
	write(1, &x, 1);
	write(1, " ", 1);
	ft_while(x - 1);// ###############3 NAO ACEITA RECURSAO NESSE CONJUNTO DE EXERCICIOS [c00 obrigatorios]
}

void	ft_print_reverse_alphabet(void)
{
	ft_while('z'); // start em z
}

int	main(void)
{
	ft_print_reverse_alphabet();
	return (0);
}

// ALFABETO REVERSO __ usando IF [aceito]
//************************C00EX02*****VERSAO FINAL*********************/
#include <unistd.h>

void	ft_print_reverse_alphabet(void)
{
	char	x;

	x = 'z';
	while (x >= 'a')
	{
		write(1, &x, 1);
		x--;
	}
}

int	main(void)
{
	ft_print_reverse_alphabet();
	return (0);
}

// PRINT NUMBERS 
#include <unistd.h>

void	ft_putchar(char x)
{
	if (x > '9')// ##### ESPERA QUE SEJA USADO WHILE OU LOOP
	{
		write(1, "\n", 1);// ###### ESCREVE BYTE NULO [\0] QUE PODE SER REJEITADO
		return ;
	}
	write(1, &x, 1);
	ft_putchar(x + 1);// ###############3 NAO ACEITA RECURSAO NESSE CONJUNTO DE EXERCICIOS [c00 obrigatorios]
}

void	ft_print_numbers(void)
{
	ft_putchar('0');
}

/*
int	main(void)
{
	ft_print_numbers();
	return (0);
}
*/

//************************C00EX03*****VERSAO FINAL*********************/
void	ft_print_numbers(void)
{
	char	x;

	x = '0';
	while (x <= '9')
	{
		write(1, &x, 1);
		x++;
	}
}

// RETORNA SE NEGATIVO
#include <unistd.h>

void	ft_is_negative(int n)
{
	if (n >= 0)
	{
		write(1, "P", 1);
	}
	else
	{
		write(1, "N", 1);
	}
	write(1, "\n", 1);

}

/*
int	main(void)
{
	ft_is_negative(82);
	return (0);
}
*/

// EX05 - IMPRIMIR COMBINAÇÃO DE 3 DÍGITOS 		<<< man ascii >>>
//************************C00EX05*****VERSAO FINAL*********************/
#include <unistd.h>

void	ft_putchar(char n)
{
	write(1, &n, 1);
}

void	ft_print_comb(void)
{
	int	a;
	int	b;
	int	c;

	a = 0;
	while (a <= 7)
	{
		b = a + 1;
		while (b <= 8)
		{
			c = b + 1;
			while (c <= 9)
			{
				ft_putchar(a + '0'); // notação para transformar no valor correspondente ascii
				ft_putchar(b + '0');
				ft_putchar(c + '0');
				if (a != 7 | b != 8 | c != 9)// gepeto disse que o operador mais correto seria || (logical OR), ao inves de | (bitwise OR) que opera bit a bit e poderia gerar erro na comparacao - nesse caso nao gerou, mas melhor evitar 
				{
					write(1, ", ", 2);
				}
				c++;
			}
			b++;
		}
		a++;
	}
}
/*
int	main(void)
{
	ft_print_comb();
	return (0);
}
*/

//EX06 ___ tentativa que não compara a dupla igual
void	ft_putchar(char n)
{
	write(1, &n, 1);
}

void	ft_print_comb(void)
{
	int	a;
	int	b;
	int	c;
	int	d;

	a = 0;
	while (a <= 9)
	{
		b = 0;
		while (b <= 8)
		{
			c = 0;
			while (c <= 9)
			{
				d = 0;
				if (a != c && b != d)
				{
					d = b + 1;
				}
				else
				{
					while (d <= 9)
					{
						ft_putchar(a + '0');
						ft_putchar(b + '0');
						write(1, " ", 1);
						ft_putchar(c + '0');
						ft_putchar(d + '0');
						if (a == 9 && b == 8 && c == 9 && d == 9)
						{
							write(1, "\n", 1);
						}						
						else
						{
							write(1, ", ", 2);
						}
					d++;
					}
				}
				c++;
			}
			b++;
		}
		a++;
	}
}

int	main(void)
{
	ft_print_comb();
	return (0);
}

//EX06 ___USANDO ARRAY ((não consegui fazer a diferenciação))
void arrayteste (char a[2] char b[2])
{
	a[0] = '0'
	a[1] = '0'
	b[0] = '0'
	b[1] = a[1] + b[1] +1
}

//EX06 ___ CORRETO !!!!
#include <unistd.h>

void	ft_putchar(char x)
{
	write(1, &x, 1);
}

void	ft_print_number(int n)
{
	ft_putchar(n / 10 + '0');
	ft_putchar(n % 10 + '0');
}

void	ft_print_comb2(void)
{
	int	a;
	int	b;

	a = 0;

	while (a <= 98)
	{
		b = a + 1;
		while (b <= 99)
		{
			ft_print_number(a);
			write(1, " ", 1);
			ft_print_number(b);
			if (!(a == 98 && b == 99))
			{
				write(1, ", ", 2);
			}
			b++;
		}
		a++;
	}
	write(1, "\n", 1);
}

int	main(void)
{
	ft_print_comb2();
	return (0);
}

//EX07___ ERRO POR NÃO TRATAR OS NUMEROS NEGATIVOS [quando entra na divisão os resultados bugam, precisa ser positivo]
#include <unistd.h>

void	ft_putchar(char x)
{
	write(1, &x, 1);
}

void	ft_print_number(int nb) 
{
	ft_putchar(nb / 100 + '0'); //char centena
	ft_putchar(nb / 10 + '0'); //char dezena
	ft_putchar(nb % 10 + '0'); //char unidade
}

void	ft_putnbr(int nb)
{
	int nb; // contador

	ft_print_number();
	return (nb);
}
//EX07 __ CORRIGIDO
#include <unistd.h>

void	ft_putchar(char d)
{
	write(1, &d, 1);
}

void	ft_print_number(int nb) // precisa abarcar o maior numero int : 2147483647 
{
	if (nb == 2147483648)
	{
		write(1, "-2147483648", 11); // problema: o INT_MIN não tem correspondente positivo (estouro da string)
		return ;
	if (nb < 0)
	{
		nb = -nb;
		write(1, "-", 1);
	}
	if (nb >= 10)
		ft_print_number(nb / 10); // recursiva, inicia de novo
ft_putchar(nb % 10 + '0');
}

void	ft_putnbr(int nb)
{
	ft_print_number(nb);
	write(1, "\n", 1);
}

int	main(void)
{
	ft_putnbr(-2147483648);
	return (0);
}

//EX08 ___ 
#include <unistd.h>

void	ft_putchar(char x)
{
	write(1, &x, 1);
}

void	ft_print_number(int n)
{
	ft_putchar(n / 100 + '0'); //char centena
	ft_putchar(n / 10 + '0'); //char dezena
	ft_putchar(n % 10 + '0'); //char unidade
}

void	ft_print_comb2(void)
{
	int	a;
	int	b;
	int nb; // contador

	a = 0;

	while (a <= 98)
	{
		b = a + 1;
		while (b <= 99)
		{
			ft_print_number(a);
			write(1, " ", 1);
			ft_print_number(b);
			if (!(a == 98 && b == 99))
			{
				write(1, ", ", 2);
			}
			nb++; //conta cada vez que printa ??
			b++;
		}
		a++;
	}
	return (nb);
}

int	main(void)
{
	ft_print_comb2();
	return (0);
}

//EX08_ versao toda errada

void	ft_print_number(void)
{
	int	d;
	int	n;

	ft_putchar(d / 10 ^ n);
	ft_putchar(d % 10 ^ n);
	write(1, ", ", 2);
}

void	ft_print_combn(int d[])
{
	1 <= n <= 9;

	int	i;
	int	f;

	d[0] = n; // condição de parada
	d[9] = 1;

	i = n - 1;
	f = 10 - n;
	d[n] = f;

	i = 0;
	while (d <= 987654321)
	{
		while (n <= 9)
		{
			ft_print_number(d);
		}
		if (d == 987654321)
		{
			write(1, "\n", 1);
		}
		else
		{
			write(1, ", ", 2);
		}
		d++;
	}
}

int	main(void)
{
	ft_print_combn();
	return (0);
}

/***********  *******  *  ***************/
/**********  *******  **  ***************/
/*********  ************  ***************/
/**********  ***********  ***************/
/*************  ********  ***************/

#include <unistd.h>

void	ft_ft(int *nbr)
{
	int	i;//inutil

	nbr[i];

	nbr[0] = '4';//int *nbr não é um array de char, mas sim um numero inteiro
	nbr[1] = '2';

	write(1, *nbr, 2);//o ex não pede para imprimir
	write(1, '\0', 1);
}

int	main(void)
{
	ft_ft(int nbr);//é invalido declarar uma var ao chamar uma função
	return (0);
}

// C01 EX00 
	//(int *nbr) ponteiro do tipo int pra local *nbr // *nbr = 42 insere o valor 42 no local

#include <unistd.h>

void	ft_ft(int *nbr)
{
	*nbr = 42;
}

/*
int	main(void)
{
	int	n;
	
	ft_ft(&n);
	printf("%d\n", n);
	return (0);
}
*/

// C01 EX01 /***********  *******  *  ***************/

#include <unistd.h>
//#include <stdio.h> //so pra teste

void	ft_ultimate_ft(int *********nbr)
{
	*********nbr = 42;
}

// int	main(void)
// {
// int	n;
// int	*p1
// int	**p2;
// int	***p3;
// int	****p4;
// int	*****p5;
// int	******p6;
// int	*******p7;
// int	********p8;
// int	*********p9;

//	n = 0; //qqr valor, so pra teste - sera alterado pela funcao
// 	*p1 = &n;
// 	**p2 = &p1;
// 	***p3 = &p2;
// 	****p4 = &p3;
// 	*****p5 = &p4;
// 	******p6 = &p5;
// 	*******p7 = &p6;
// 	********p8 = &p7;
// 	*********p9 = &p8;

// 	ft_ultimate_ft(int *********nbr);
// 	printf("%d\n", *********nbr);
// 	return (0);
// }

// C01 EX02 /***********  *******  *  ***************/
#include <unistd.h>
#include <stdio.h>

void	ft_swap(int *a, int *b)
{
	int	aux; // cria um auxiliar pra armazenar o valor de a que vai ser substituido por b

	aux = *a; //depois do = deve vir  uma variável, não um valor a ser aribuido (nesse caso uma expressão, pior ainda)
	*a = *b;
	*b = aux;
}

int	main(void)
{
	int	a = 11;
	int	b = 22;

	ft_swap(&a, &b);
	printf("a = %d, b = %d\n", a, b);
	return (0);
}

// C01 EX03 /***********ERRADO******  *  ***************/

#include <unistd.h>
#include <stdio.h>

void	ft_div_mod(int a, int b, int *div, int *mod)
{
	if (b) // mesma coisa que if (0), ou seja, if true, if (b != 0)
	{
		(a / b) = div; //a conversão só faz sentido se for de valor > caracterr de impressão. Nesse caso só armazena, então não é necessário
		(a % b) = mod; // o valor está dentro da main, aqui é a dereferencia *mod
	}
}

void	main(void) // o correto "p/ portabilidade em C" é int main(void)
{
	int	n, n1, m, *div, *mod; // correto é div, mod

	n = 11;
	n1 = 10;
	m = 5;

	ft_div_mod(n, m, &div, &mod);
	printf(div = "%d", mod = "%d\n", div, mod); // ERRADO " " !!!
	return ();
}

// C01 EX03 /***********CORRETO**********************/
#include <unistd.h>
//#include <stdio.h>

void	ft_div_mod(int a, int b, int *div, int *mod)
{
	if (b) // mesma coisa que if (0), ou seja, if true, if (b != 0)
	{
		*div = (a / b);
		*mod = (a % b);
	}
}

// int	main(void)
// {
// 	int	n, n1, m, div, mod;

// 	n = 11;
// 	n1 = 10; // segundo valor só para teste
// 	m = 5; 

// 	ft_div_mod(n, m, &div, &mod);
// 	printf("div = %d, mod = %d\n", div, mod);
// 	ft_div_mod(n1, m, &div, &mod);
// 	printf("div = %d, mod = %d\n", div, mod);
// 	return (0);
// }

// C01 EX04 /********************************/
agora o valor e o resultado estão armazenados no mesmo int, 
por isso precisa ter uma int aux que vai existir apenas no processo de calculo.

#include <unistd.h>

void	ft_ultimate_div_mod(int *a, int *b)
{
	if (*b) // se (b) errado, não quero validar se o valor b != 0, mas sim se o valor no local *b != 0
	{
		*a = (a / b);
		*b = (a % b); //desse jeito não esta salvando o valor *a antes de sobrescrevelo
	}
}

// C01 EX04 /***********CORRETO**********************/

#include <unistd.h>
#include <stdio.h>

void	ft_ultimate_div_mod(int *a, int *b)
{
	int	aux;

	aux = *a;

	if (*b)
	{
		*a = (aux / *b);
		*b = (aux % *b);
	}
}

int	main(void)
{
	int	a, b, a2;

	a = 11;
	a2 = 10; // segundo valor só para teste
	b = 5; 

	ft_ultimate_div_mod(&a, &b);
	printf("*a = %d, *b = %d\n", a, b);
	ft_ultimate_div_mod(&a2, &b);
	printf("*a = %d, *b = %d\n", a, b);
	return (0);
}

// C01 EX05 /***********try**********************/

não precisa de var temp , nem de \n quebra de linha. 
a condição de parada está dentro de while
#include<unistd.h>

void	ft_putstr(char *str)
{
	int	i;

	i = 0;
	while (str[i] != '\0')
	{
		write(1, &str[i], 1);
		i++;
	}
	write(1, "\n", 1);
}

int	main(void)
{
	char	*x = "hanananay"; // mesmo tipo de parametro

	ft_putstr(x); 
	return (0);
}

// C01 EX06 /***********try**********************/
pra imprimir o numero com write, precisa de ft_putnbr - recursivamente vai imprimindo o digito e calculando o resto
melhor mesmo usar printif para testar 
#include <unistd.h>
//#include <stdio.h>

int	ft_strlen(char *str)
{
	int	i; //posição do char

	i = 0; //lembrar de usar o inteiro e não o caractere '0';
	while (str[i] != '\0') //termina ao final da string
	{
		i++; // incrementa pra contar o total
	}
	return (i); //retorna (um int)o valor final, mas não imprime, só salva
}

// int	main(void)
// {
// 	char	*entrada = "molabanana 01";
// 	int		aux;

// 	aux = ft_strlen(entrada);
// 	printf("a string tem %d caracteres\n", aux);
// 	return (0);
// }

// C01 EX07 /***********CORRETO**********************/

sizeof(tab) retorna o tamanho total em bytes do array tab.

sizeof(tab[0]) retorna o tamanho em bytes de um elemento do array (no caso, um int).

Dividindo o total pelo tamanho de um elemento, você obtém a quantidade de elementos.

#include <unistd.h>

void	ft_rev_int_tab(int *tab, int size)
{
	int	start;
	int	end;
	int	aux;

	end = size - 1;
	start = 0;
	while (end > start)
	{
		aux = tab[start];
		tab[start] = tab[end];
		tab[end] = aux;
		start++;
		end--;
	}
}

#include <stdio.h>

int	main(void)
{
	int	tab[] = {1,2,3,5,8}; //entrada // um inteiro literal como 5789 não é aceito // um array dado na main é considerado estático
	int	aux;
	int	size = sizeof(tab) / sizeof(tab[0]); //descobre o tamanho do **ponteiro** que aponta p/ um array estático

	ft_rev_int_tab(tab, size);//inversao

	write(1, "tab reverso é", 15);
	aux = 0; // só pra inicializar
	while (aux < size)
	{
		printf(" %d", tab[aux]);//saida
		aux++;
	}
	printf("\n");
	return (0);
}

// C01 EX08 /***********try*QUASE*********************/
#include <unistd.h>

void	ft_sort_int_tab(int *tab, int size)
{
	int	start;
	int	next;
	int	aux;

	start = 0;
	while (start < size - 1) //(size - 1) = fim do array
	{
		next = 0;
		while (next < size - 1 - start) //compara (tab[1] > tab[0]), se vdd, está em ordem.
		{
			if (tab[next] > tab[next + 1])
				aux = tab[next]; //salva aux = tab[0]
				tab[next] = tab[next + 1]; //compara tab[0] com tab[2]
				tab[next + 1] = aux; //sobrescreve tab[2] com aux(tab[0])
			next++; //tab[2] //++tab[3]
		}
		start++;
	}
}

// C01 EX08 /***********CORRETO**********************/

#include <unistd.h>

void	ft_sort_int_tab(int *tab, int size)
{
	int	start;
	int	next;
	int	aux;

	start = 0;
	while (start < size - 1) //(size - 1) = fim do array
	{
		next = 0;
		while (next < size - 1 - start) //compara (tab[1] > tab[0]), se vdd, está em ordem.
		{
			if (tab[next] > tab[next + 1])
			{
			aux = tab[next];
			tab[next] = tab[next + 1];
			tab[next + 1] = aux;
			}
			next++;
		}
		start++;
	}
}

#include <stdio.h>

int	main(void)
{
	int	tab[] = {5, 3, 2, 4, 1};
	int	size = 5;
	int	start;

	ft_sort_int_tab(tab, size);

	start = 0;
	while (start < size)
	{
		printf("%d ", tab[start]);
		start++;
	}
	printf("\n");
	return (0);
}

// C03 EX00 /***********try**********************/
<string.h> //funçao strcmp()
// compara duas strings byte a byte. 
//quando os dois valores coincidem, retorna (0)
(0) é a diferença entre os dois valores ascii, ou seja se for "a" e "a", int(48) - int(48) = 0
// se diferentes, o valor da diferença é retornado e a varredura PARA.
//se toda a string coincide, para quando encontra NULL.
// unsigned char >> trata negativos corretamente


#include <unistd.h>

int	ft_strcmp(char *s1, char *s2)
{
	int	i;

	i = 0;
	while (s1[i] && s2[i] && s1[i] == s2[i]) //enquanto houver char em 1, em 2, E forem iguais
		i++;
	return ((unsigned char)s1[i] - (unsigned char)s2[i]);
}

#include <stdio.h>

int	main(void)
{
	char	*str1 = "banana";
	char	*str2 = "batata";
	char	*str3 = "banana";
	char	*str0 = "";

	printf("%s, %s, %d\n", str1, str2, ft_strcmp(str1, str2)); //%s >> determina formato de saída, no caso s = string. Na sequencia str1, é o char apontado como parametro
	printf("%s, %s, %d\n", str1, str3, ft_strcmp(str1, str3));//%d >> determina saída de número inteiro com sinal em base decimal, por isso ft_strcmp é int.
	printf("%s, %s, %d\n", str1, str0, ft_strcmp(str1, str0));

	return (0);
}

// C03 EX02 /***********try**********************/

#include <unistd.h>

int	ft_strlen(char *str)
{
	int	i;

	i = 0;
	while (str[i] != '\0') //conta o tamanho de str
	{
		i++;
	}
	return (i); //salva em i
}

char	*ft_strcat(char *dest, char *src)
{
	int	len;
	int	i;

	i = 0;
	while (dest[i] != '\0') //caminha até o final de dest
	{
		i++;
	}
	len = 0;
	while (src[len] != '\0') //passa a caminhar até o final de src == concatena
	{
		dest[i] = src[len]; //copia o char[i] de src na mesma posição [len=i] a partir do final da string
		i++; //caminha no indice de destino
		len++; //caminha no indice de origem
	}

	dest[i] = '\0'; //adc o terminador
	return (dest);
}

int	main(void) //se declarei int ele deveria retornar int
{
	char	src[] = "vida-breve";
	char	dest[100] = "sem-código";

	ft_strcat(dest, src); //concatena

	int	len = ft_strlen(dest); //mede a str resultante

	write(1, dest, len);
	return (0); //nunca é vazio
}

// C03 EX01 /**********ok*********************/

#include <unistd.h>

int	ft_strncmp(char *s1, char *s2, unsigned int n)
{
	unsigned int	index;

	index = 0;
	while (s1[n] && s2[n] && s1[index] == s2[index])
	{
		index++;
	}
	if (index == n)
		return (0);
	return ((unsigned char)s1[index] - (unsigned char)s2[index]);
}

#include <stdio.h>

int	main(void)
{
	char	*s1 = "banana";
	char	*s2 = "batata";
	char	*s3 = "banana";
	char	*s0 = "";

	printf("%s, %s, %d\n", s1, s2, ft_strncmp(s1, s2, 6)); //%s >> determina formato de saída, no caso s = string. Na sequencia str1, é o char apontado como parametro
	printf("%s, %s, %d\n", s1, s3, ft_strncmp(s1, s3, 6));//%d >> determina saída de número inteiro com sinal em base decimal, por isso ft_strcmp é int.
	printf("%s, %s, %d\n", s1, s0, ft_strncmp(s1, s0, 6));

	return (0);
}

// C03 EX05 /**********ok*********************/
//#include <stdio.h>
unsigned int	ft_strlcat(char *dest, char *src, unsigned int size)
{
	unsigned int	dest_len;
	unsigned int	src_len;
	unsigned int	i;

	dest_len = 0;
	while (dest[dest_len])
		dest_len++;
	src_len = 0;
	while (src[src_len])
		src_len++;
	if (dest_len >= size)
		return (size + src_len);
	if (size > 0)
	{
		i = 0;
		while (src[i] && (dest_len + i) < size - 1)
		{
			dest[dest_len + i] = src[i];
			i++;
		}
		dest[dest_len + i] = '\0';
	}
	return (dest_len + src_len);
}
/*
int	main(void)
{
	char	dest[10] = "Hello ";
	ft_strlcat(dest, "World!", 10);
	printf("%s", dest);
}*/
